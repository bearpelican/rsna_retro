# AUTOGENERATED! DO NOT EDIT! File to edit: 04_trainfull3d_labels.ipynb (unless otherwise specified).

__all__ = ['Flat3d', 'XResNet3D', 'xres3d', 'RowLoss']

# Cell
from .imports import *
from .metadata import *
from .preprocess import *
from .train import *
from .train3d import *

# Cell
class Flat3d(Module):
    def forward(self, x): return x.view(x.shape[0],-1)

# Cell
#export
class XResNet3D(nn.Sequential):
    @delegates(ResBlock)
    def __init__(self, block, expansion, layers, p=0.0, c_in=3, c_out=1000, stem_szs=(32,32,64),
                 widen=1.0, sa=False, act_cls=defaults.activation, **kwargs):
        store_attr(self, 'block,expansion,act_cls')
        stem_szs = [c_in, *stem_szs]
        stem = [ConvLayer(stem_szs[i], stem_szs[i+1], stride=2 if i==0 else 1, act_cls=act_cls, ndim=3)
                for i in range(3)]

        block_szs = [int(o*widen) for o in [64,128,256,512] +[256]*(len(layers)-4)]
        block_szs = [64//expansion] + block_szs
        blocks = [self._make_layer(ni=block_szs[i], nf=block_szs[i+1], blocks=l,
                                   stride=1 if i==0 else 2, sa=sa and i==len(layers)-4, **kwargs)
                  for i,l in enumerate(layers)]
        super().__init__(
            Batchify(),
            *stem, nn.MaxPool3d(kernel_size=3, stride=2, padding=1),
            *blocks,
            ConvLayer(512,512,stride=2,ndim=3), # 8
            ConvLayer(512,1024,stride=2,ndim=3), # 4
            ConvLayer(1024,1024,stride=2,ndim=3), # 2
            nn.AdaptiveAvgPool3d((1, 1, 1)), Batchify(), Flat3d(), nn.Dropout(p),
            nn.Linear(1024*expansion, c_out),
#             nn.Linear(block_szs[-1]*expansion, c_out),
        )
        init_cnn(self)

    def _make_layer(self, ni, nf, blocks, stride, sa, **kwargs):
        return nn.Sequential(
            *[self.block(self.expansion, ni if i==0 else nf, nf, stride=stride if i==0 else 1,
                      sa=sa and i==(blocks-1), act_cls=self.act_cls, **kwargs)
              for i in range(blocks)])

# Cell
def xres3d(**kwargs):
    m = XResNet3D(ResBlock, expansion=1, layers=[2, 2,  2, 2], c_out=6, ndim=3, **kwargs)
    init_cnn(m)
    return m

# Cell
class RowLoss(Callback):
    def __init__(self): super().__init__()

    def after_pred(self):
        learn = self.learn
        learn.pred = learn.pred
        learn.yb = (learn.yb[0].max(dim=1)[0],)