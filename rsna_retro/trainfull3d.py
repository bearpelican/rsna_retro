# AUTOGENERATED! DO NOT EDIT! File to edit: 03_trainfull3d.ipynb (unless otherwise specified).

__all__ = ['conv3d', 'XResNet']

# Cell
from .imports import *
from .metadata import *
from .preprocess import *
from .train import *
from .train3d import *

# Cell
def conv3d(ni,nf,ks=(5,3,3),s=(1,2,2),**kwargs):
    p = tuple([i//2 for i in ks])
    return ConvLayer(ni, nf, ks, stride=s, padding=p, **kwargs)

# Cell
#export
class XResNet(nn.Sequential):
    @delegates(ResBlock3D)
    def __init__(self, block, expansion, layers, p=0.0, c_in=3, c_out=1000, stem_szs=(32,32,64),
                 widen=1.0, sa=False, act_cls=defaults.activation, **kwargs):
        store_attr(self, 'block,expansion,act_cls')
        stem_szs = [c_in, *stem_szs]
        stem = [conv3d(stem_szs[i], stem_szs[i+1], s=(1,2,2) if i==0 else (1,1,1), act_cls=act_cls, ndim=3)
                for i in range(3)]

        block_szs = [int(o*widen) for o in [64,128,256,512] +[256]*(len(layers)-4)]
        block_szs = [64//expansion] + block_szs
        blocks = [self._make_layer(ni=block_szs[i], nf=block_szs[i+1], blocks=l,
                                   stride=1 if i==0 else 2, sa=sa and i==len(layers)-4, **kwargs)
                  for i,l in enumerate(layers)]
        super().__init__(
            Batchify(),
            *stem, nn.MaxPool3d(kernel_size=(1,3,3), stride=(1,2,2), padding=(0,1,1)),
            *blocks,
            nn.AdaptiveAvgPool3d((None, 1, 1)), Batchify(), Flat3d(), nn.Dropout(p),
            nn.Linear(block_szs[-1]*expansion, c_out),
        )
        init_cnn(self)

    def _make_layer(self, ni, nf, blocks, stride, sa, **kwargs):
        return nn.Sequential(
            *[self.block(self.expansion, ni if i==0 else nf, nf, stride=stride if i==0 else 1,
                      sa=sa and i==(blocks-1), act_cls=self.act_cls, **kwargs)
              for i in range(blocks)])