# AUTOGENERATED! DO NOT EDIT! File to edit: 05_train_adjacent.ipynb (unless otherwise specified).

__all__ = ['TfmSlice', 'mean_5c', 'std_5c', 'mean_adj', 'std_adj', 'get_adj_data', 'get_adj_test_data']

# Cell
from .imports import *
from .metadata import *
from .preprocess import *
from .train import *
from .train3d import *

# Cell
class TfmSlice:
    def __init__(self, df, path, c3=False):
        self.fn = get_pil_fn(path)
        self.tt = ToTensor()
        self.df = df
        self.c3 = c3

    def get_adj(self, idx, x_mid, sid_mid):
        if idx < 0 or idx >= self.df.shape[0] \
        or  self.df.iloc[idx].SeriesInstanceUID != sid_mid:
            return torch.zeros_like(x_mid)
        adj_item = self.df.index[idx]
        return self.tt(self.fn(adj_item))

    def __call__(self, item):
        idx = self.df.index.get_loc(item)
        sid = self.df.loc[item].SeriesInstanceUID
        x = self.tt(self.fn(item))
        x_prev = self.get_adj(idx-1, x, sid)
        x_next = self.get_adj(idx+1, x, sid)
        x = x[:1] if self.c3 else x

        return TensorCTScan(torch.cat([x_prev[:1], x, x_next[:1]]))

# Cell
mean_5c = [mean[0], *mean, mean[0]]
std_5c = [std[0], *std, std[0]]

mean_adj = [mean[0]]*3
std_adj = [mean[0]]*3

# Cell
def get_adj_data(bs, sz, splits, img_dir=path_jpg256, c3=False, df=Meta.df_comb, test=False):
    tfm = TfmSlice(df, img_dir, c3=c3)
    mean,std = (mean_adj, std_adj) if c3 else (mean_5c, std_5c)
    return get_data_gen(L(list(df.index)), bs=bs, img_tfm=tfm, sz=sz, splits=splits,
                       mean=mean, std=std, test=test)

# Cell
def get_adj_test_data(bs=512, sz=256, tst_dir='tst_jpg', c3=False):
    tst_fns = Meta.df_tst.index.values
    tst_splits = [L.range(tst_fns), L.range(tst_fns)]
    tst_dbch = get_adj_data(bs, sz, tst_splits, path/tst_dir, df=Meta.df_tst, c3=c3, test=True)
#     tst_dbch = get_data_gen(tst_fns, bs=bs, img_tfm=get_pil_fn(path/tst_dir), sz=sz, splits=tst_splits, test=True)
    tst_dbch.c = 6
    return tst_dbch