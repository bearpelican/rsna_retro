#AUTOGENERATED! DO NOT EDIT! File to edit: dev/01_data_01_metadata_stage2.ipynb (unless otherwise specified).

__all__ = ['path', 'path_meta', 'dir_trn', 'dir_tst', 'fth_lbl', 'fth_trn', 'fth_tst', 'fth_trn_comb',
           'fth_trn_comb_any', 'fn_splits', 'fn_splits_any', 'htypes', 'path_trn', 'fns_trn', 'path_tst', 'fns_tst',
           'save_lbls', 'df_tst', 'df_comb', 'group_cv', 'split_data', 'get_splits', 'splits', 'df_any', 'splits_any']

#Cell
from .imports import *

#Cell
set_num_threads(1)
path = Path('~/data/rsna').expanduser()
path_meta = path/'meta'

#Cell
dir_trn = 'stage_2_train'
dir_tst = 'stage_2_test'
fth_lbl = path_meta/'labels2.fth'
fth_trn = path_meta/'df_trn2.fth'
fth_tst = path_meta/'df_tst2.fth'
fth_trn_comb = path_meta/'df_trn2_comb.fth'
fth_trn_comb_any = path_meta/'df_trn2_any.fth'

#Cell
fn_splits = path/'splits.pkl'
fn_splits_any = path/'splits_any.pkl'

#Cell
htypes = ['any','epidural','intraparenchymal','intraventricular','subarachnoid','subdural']

#Cell
path_trn = path/dir_trn
fns_trn = path_trn.ls()

path_tst = path/dir_tst
fns_tst = path_tst.ls()

#Cell
def save_lbls():
    path_lbls = path/f'{dir_trn}.csv'
    if fth_lbl.exists(): return
    lbls = pd.read_csv(path_lbls)
    lbls[["ID","htype"]] = lbls.ID.str.rsplit("_", n=1, expand=True)
    lbls.drop_duplicates(['ID','htype'], inplace=True)
    pvt = lbls.pivot('ID', 'htype', 'Label')
    pvt.reset_index(inplace=True)
    pvt.to_feather(fth_lbl)

#Cell
df_tst = pd.read_feather(fth_tst).set_index('SOPInstanceUID')

#Cell
df_comb = pd.read_feather(fth_trn_comb).set_index('SOPInstanceUID')

#Cell
def group_cv(idx, grps): return np.concatenate([grps[o] for o in range_of(grps) if o!=idx])

# column can also be PatientID
def split_data(df, cv_idx, grps, column):
    idx = L.range(df)
    grp_cv = group_cv(cv_idx, grps)
    mask = df[column].isin(grp_cv)
    return idx[mask],idx[~mask]

#Cell
def get_splits(df, column='SeriesInstanceUID', nfold=8, ifold=0):
    set_seed(42)
    unique_ids = df[column].unique()
    np.random.shuffle(unique_ids)
    grps = np.array_split(unique_ids, nfold)
    return split_data(df, ifold, grps, column=column)

#Cell
splits = fn_splits.load()

#Cell
df_any = pd.read_feather(fth_trn_comb_any).set_index('SOPInstanceUID')

#Cell
splits_any = fn_splits_any.load()