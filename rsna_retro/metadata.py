#AUTOGENERATED! DO NOT EDIT! File to edit: dev/01_data_01_metadata_stage2.ipynb (unless otherwise specified).

__all__ = ['path', 'path_meta', 'dir_trn', 'dir_tst', 'fth_lbl', 'fth_trn', 'fth_tst', 'fth_trn_comb', 'fn_splits',
           'fn_splits_wgt', 'htypes', 'path_trn', 'fns_trn', 'path_tst', 'fns_tst', 'save_lbls', 'df_tst', 'df_comb',
           'patient_cv', 'split_data', 'get_splits', 'splits', 'get_splits_healthy', 'splits_wgt']

#Cell
from .imports import *

#Cell
set_num_threads(1)
path = Path('~/data/rsna').expanduser()
path_meta = path/'meta'

#Cell
dir_trn = 'stage_2_train'
dir_tst = 'stage_2_test'
fth_lbl = path_meta/'labels2.fth'
fth_trn = path_meta/'df_trn2.fth'
fth_tst = path_meta/'df_tst2.fth'
fth_trn_comb = path_meta/'df_trn2_comb.fth'

#Cell
fn_splits = path/'splits.pkl'
fn_splits_wgt = path/'splits_wgt.pkl'

#Cell
htypes = ['any','epidural','intraparenchymal','intraventricular','subarachnoid','subdural']

#Cell
path_trn = path/dir_trn
fns_trn = path_trn.ls()

path_tst = path/dir_tst
fns_tst = path_tst.ls()

#Cell
def save_lbls():
    path_lbls = path/f'{dir_trn}.csv'
    if fth_lbl.exists(): return
    lbls = pd.read_csv(path_lbls)
    lbls[["ID","htype"]] = lbls.ID.str.rsplit("_", n=1, expand=True)
    lbls.drop_duplicates(['ID','htype'], inplace=True)
    pvt = lbls.pivot('ID', 'htype', 'Label')
    pvt.reset_index(inplace=True)
    pvt.to_feather(fth_lbl)

#Cell
df_tst = pd.read_feather(fth_tst).set_index('SOPInstanceUID')

#Cell
df_comb = pd.read_feather(fth_trn_comb).set_index('SOPInstanceUID')

#Cell
def patient_cv(idx, patient_grps): return np.concatenate([patient_grps[o] for o in range_of(patient_grps) if o!=idx])

def split_data(df, cv_idx, patient_grps):
    idx = L.range(df)
    pgrp = patient_cv(cv_idx, patient_grps)
    mask = df.PatientID.isin(pgrp)
    return idx[mask],idx[~mask]

#Cell
def get_splits(df_comb, nfold=8, ifold=0):
    set_seed(42)
    patients = df_comb.PatientID.unique()
    np.random.shuffle(patients)
    patient_grps = np.array_split(patients, nfold)
    return split_data(df_comb, ifold, patient_grps)

#Cell
splits = fn_splits.load()

#Cell
def get_splits_healthy(df_comb, nfold=8, ifold=0, remove_pct=1.0):
    df_sum = df_comb.groupby('PatientID').sum();
    patients = df_comb.PatientID.unique()
    patients_healthy = df_sum.loc[df_sum['any'] == 0].index.values
    # np.random.shuffle(patients_healthy)
    remove_to_idx = int(remove_pct * len(patients_healthy))
    print(f'Removing num healthy: {remove_to_idx}/{len(patients_healthy)}')
    patients_wgt = np.array(list(set(patients) - set(patients_healthy[:remove_to_idx])))

    patient_grps_wgt = np.array_split(patients_wgt, nfold)
    splits_wgt = split_data(df_comb, ifold, patient_grps_wgt)
    return splits_wgt

#Cell
splits_wgt = fn_splits_wgt.load()