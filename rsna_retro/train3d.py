#AUTOGENERATED! DO NOT EDIT! File to edit: dev/03_train3d_00_train3d.ipynb (unless otherwise specified).

__all__ = ['OpenCTs', 'TfmSOP', 'get_3d_dsrc', 'get_np_fn', 'OpenFeats', 'Batchify', 'DeBatchify', 'conv3',
           'get_3d_head']

#Cell
from .imports import *
from .metadata import *
from .preprocess import *
from .train import *

#Cell
class OpenCTs:
    def __init__(self, path):
        self.fn = get_pil_fn(path)
        self.tt = ToTensor()
    def __call__(self, item):
        if isinstance(item, (str, Path)): return self.fn(item)
        xs = [self.tt(self.fn(x)) for x in item]
        return TensorCTScan(torch.stack(xs))

#Cell
class TfmSOP:
    def __init__(self,df,open_fn):
        self.open_fn = open_fn
        self.df = df

    def x(self, sid):
        sids = self.df.SOPInstanceUID[sid].values
        return self.open_fn(sids)

    def y(self, sid): return TensorMultiCategory(self.df.loc[sid,htypes].values).float()

#Cell
def get_3d_dsrc(df, open_fn):
    df_series = df.reset_index().set_index('SeriesInstanceUID').sort_values("ImagePositionPatient2")
    tfm = TfmSOP(df_series, open_fn)
    sids = df_series.index.unique()
    splits = RandomSplitter(valid_pct=0.1, seed=42)(sids)
    dsrc = DataSource(sids, [[tfm.x],[tfm.y]], splits=splits)
    return dsrc

#Cell
def get_np_fn(p):
    def _f(fn): return torch.from_numpy(np.load(str(p/f'{fn}.npy')))
    return _f

#Cell
class OpenFeats:
    def __init__(self, path):
        self.fn = get_np_fn(path)
        self.tt = ToTensor()
    def __call__(self, item):
        if isinstance(item, (str, Path)): return self.fn(item)
        xs = [self.tt(self.fn(x)) for x in item]
        return TensorCTScan(torch.stack(xs))

#Cell
class Batchify(Module):
    def forward(self, x): return x[None].transpose(1,2)

class DeBatchify(Module):
    def forward(self, x): return x[0].transpose(0,1)

def conv3(ni,nf,stride=1):
    return ConvLayer(ni, nf, (5,3,3), stride=(1,stride,stride), ndim=3, padding=(2,1,1))

#Cell
def get_3d_head():
    m = nn.Sequential(Batchify(),
        conv3(512,256,2), # 8
        conv3(256,128,2), # 4
        conv3(128, 64,2), # 2
        DeBatchify(), nn.AdaptiveAvgPool2d(1), Flatten(), nn.Linear(64,6))
    init_cnn(m)
    return m